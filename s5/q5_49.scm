;; q5.49
(load "./register_machine_with_trace3.scm")
(load "./operations.scm")
(load "./compiler.scm")
(load "./eceval-for-compiler.scm")

;; 入力をコンパイルして実行するマシーン

(define (ce-machine) compile-and-eval-machine)

(define machine-operations
  (list
   (list 'read read)
   (list 'self-evaluating? self-evaluating?)
   (list 'quoted? quoted?)
   (list 'text-of-quotation text-of-quotation)
   (list 'variable? variable?)
   (list 'assignment? assignment?)
   (list 'assignment-variable assignment-variable)
   (list 'assignment-value assignment-value)
   (list 'definition? definition?)
   (list 'definition-variable definition-variable)
   (list 'definition-value definition-value)
   (list 'lambda? lambda?)
   (list 'lambda-parameters lambda-parameters)
   (list 'lambda-body lambda-body)
   (list 'if? if?)
   (list 'if-predicate if-predicate)
   (list 'if-consequent if-consequent)
   (list 'if-alternative if-alternative)
   (list 'begin? begin?)
   (list 'begin-actions begin-actions)
   (list 'last-exp? last-exp?)
   (list 'first-exp first-exp)
   (list 'rest-exps rest-exps)
   (list 'application? application?)
   (list 'operator operator)
   (list 'operands operands)
   (list 'no-operands? no-operands?)
   (list 'first-operand first-operand)
   (list 'rest-operands rest-operands)
   (list 'true? true?)
   (list 'false? false?)
   (list 'make-procedure make-procedure)
   (list 'compound-procedure? compound-procedure?)
   (list 'procedure-parameters procedure-parameters)
   (list 'procedure-body procedure-body)
   (list 'procedure-environment procedure-environment)
   (list 'extend-environment extend-environment)
   (list 'lookup-variable-value lookup-variable-value)
   (list 'set-variable-value! set-variable-value!)
   (list 'define-variable! define-variable!)
   (list 'primitive-procedure? primitive-procedure?)
   (list 'apply-primitive-procedure apply-primitive-procedure)
   (list 'prompt-for-input prompt-for-input)
   (list 'announce-output announce-output)
   (list 'user-print user-print)
   (list 'empty-arglist empty-arglist)
   (list 'adjoin-arg adjoin-arg)
   (list 'last-operand? last-operand?)
   (list 'no-more-exps? no-more-exps?)
   (list 'get-global-environment get-global-environment)
   (list 'make-compiled-procedure make-compiled-procedure)
   (list 'compiled-procedure? compiled-procedure?)
   (list 'compiled-procedure-entry compiled-procedure-entry)
   (list 'compiled-procedure-env compiled-procedure-env)

   (list 'car car)
   (list 'cdr cdr)
   (list 'cons cons)
   (list 'null? null?)
   (list '+ +)
   (list '- -)
   (list '* *)
   (list '= =)
   (list '/ /)
   (list '> >)
   (list '< <)
   (list 'list list)

   (list 'ce-machine ce-machine)
   (list 'compile compile)
   (list 'assemble assemble)
   (list 'statements statements)
   ))

(define compile-and-eval-machine
  (make-machine
   '(exp env val proc argl continue unev current-machine)
   machine-operations
   '(
       (assign current-machine (op ce-machine))
     read-eval-print-loop
       (perform (op initialize-stack))
       (perform (op prompt-for-input) (const ";;; Compile and Eval input:"))
       (assign exp (op read))
       (assign env (op get-global-environment))
       (assign continue (label print-result))
       (assign exp (op compile) (reg exp) (const val) (const return))
       (assign exp (op statements) (reg exp))
       (assign val (op assemble) (reg exp) (reg current-machine))
       ;; (perform (op user-print) (reg val))
       (goto (reg val))
     print-result
       (perform (op print-stack-statistics))
       (perform (op announce-output) (const ";;; Compile and Eval value:"))
       ;; (perform (op user-print) (reg val))
       (goto (label read-eval-print-loop))
       )))

(define the-global-environment '())
(set! the-global-environment (setup-environment))
(start compile-and-eval-machine)
